{"version":3,"sources":["API.ts","components/PackageInput/utils.ts","features/packages/packagesSlice.ts","components/PackageInput/PackageInput.tsx","components/PackageInput/index.ts","components/PackagesTable/utils.tsx","components/PackagesTable/index.ts","components/PackagesTable/PackagesTable.tsx","containers/MainPage/MainPage.tsx","containers/MainPage/index.ts","app/store.ts","App.tsx","index.tsx"],"names":["httpRequest","Axios","create","baseURL","api","getPackage","name","a","get","params","q","data","console","log","getPackagesData","dependenciesList","length","Modal","error","title","promises","map","dep","API","Promise","all","then","res","item","results","package","packagesSlice","createSlice","initialState","packagesList","loading","reducers","updatePackage","state","action","payload","setLoading","actions","reducer","TextArea","Input","PackageInput","dispatch","useDispatch","useSelector","packages","Form","useForm","form","onFinish","e","Object","keys","JSON","parse","r","catch","finally","layout","Item","required","allowClear","autoSize","minRows","placeholder","type","htmlType","columns","dataIndex","key","width","render","keywords","keyword","id","color","toUpperCase","links","target","rel","href","npm","PackagesTable","className","dataSource","pagination","bordered","rowKey","Title","Typography","MainPage","direction","size","style","level","store","configureStore","packageReducer","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ca97233.chunk.js","sourcesContent":["import Axios from 'axios';\nimport { IApi } from './types/APITypes';\n\nconst httpRequest = Axios.create({\n  baseURL: 'https://api.npms.io/v2/search',\n});\n\nconst api: IApi = {\n  getPackage: async (name) => {\n    const { data } = await httpRequest.get('', {\n      params: {\n        q: name,\n      },\n    });\n\n    console.log(data);\n    return data;\n  },\n};\n\nexport default api;\n","import API from '../../API';\nimport { Modal } from 'antd';\nimport { TGetPackagesData } from './PackageInputTypes';\n\nexport const getPackagesData: TGetPackagesData = async (dependenciesList) => {\n  if (!dependenciesList.length) {\n    Modal.error({ title: 'JSON is empty' });\n    return [];\n  }\n\n  const promises = dependenciesList.map((dep) => API.getPackage(dep));\n\n  return await Promise.all(promises).then((res) =>\n    res.map((item) => item.results[0].package),\n  );\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IPackage, IPackagesState } from './packagesSliceTypes';\n\nconst initialState: IPackagesState = {\n  packagesList: [],\n  loading: false,\n};\n\nexport const packagesSlice = createSlice({\n  name: 'packages',\n  initialState,\n  reducers: {\n    updatePackage: (state, action: PayloadAction<IPackage[]>) => {\n      state.packagesList = action.payload;\n    },\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n    },\n  },\n});\n\nconst { actions, reducer } = packagesSlice;\n\nexport const { updatePackage, setLoading } = actions;\n\nexport default reducer;\n","import React from 'react';\nimport { Button, Form, Input, Modal } from 'antd';\nimport { getPackagesData } from './utils';\nimport { TOnFinish } from './PackageInputTypes';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../app/types';\nimport {\n  setLoading,\n  updatePackage,\n} from '../../features/packages/packagesSlice';\n\nconst { TextArea } = Input;\n\nconst PackageInput: React.FC = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector((state: RootState) => state.packages.loading);\n  const [form] = Form.useForm();\n\n  const onFinish: TOnFinish = async (e) => {\n    const packages = Object.keys(JSON.parse(e.package));\n    dispatch(setLoading(true));\n    getPackagesData(packages)\n      .then((r) => dispatch(updatePackage(r)))\n      .catch((e) => Modal.error({ title: e }))\n      .finally(() => dispatch(setLoading(false)));\n  };\n\n  return (\n    <Form form={form} layout='vertical' onFinish={onFinish}>\n      <Form.Item name='package' required>\n        <TextArea\n          allowClear\n          autoSize={{ minRows: 2 }}\n          placeholder='Insert dependencies json: { \"react\": \"^17.0.2\" }'\n        />\n      </Form.Item>\n      <Form.Item>\n        <Button loading={loading} type='primary' htmlType='submit'>\n          Find\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default PackageInput;\n","import PackageInput from './PackageInput';\n\nexport default PackageInput;\n","import React from 'react';\nimport { Tag } from 'antd';\n\nexport const columns = [\n  {\n    title: 'Title',\n    dataIndex: 'name',\n    key: 'name',\n    width: '15%',\n  },\n  {\n    title: 'Description',\n    dataIndex: 'description',\n    key: 'description',\n    width: '40%',\n  },\n  {\n    title: 'Tags',\n    dataIndex: 'keywords',\n    key: 'keywords',\n    render: (keywords: string[]) => (\n      <>\n        {keywords?.map((keyword, id) => (\n          <Tag color='blue' key={`${keyword}-${id}`}>\n            {keyword.toUpperCase()}\n          </Tag>\n        ))}\n      </>\n    ),\n  },\n  {\n    title: 'NPM link',\n    dataIndex: 'links',\n    key: 'links',\n    render: (links: { npm: string }) => (\n      <a target='_blank' rel='noreferrer' href={links.npm}>\n        {links.npm}\n      </a>\n    ),\n  },\n];\n","import PackagesTable from './PackagesTable';\n\nexport default PackagesTable;\n","import React from 'react';\nimport { Table } from 'antd';\nimport { columns } from './utils';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../app/types';\n\nconst PackagesTable: React.FC = () => {\n  const { loading, packagesList } = useSelector(\n    (state: RootState) => state.packages,\n  );\n\n  return (\n    <div className='App'>\n      <Table\n        loading={loading}\n        columns={columns}\n        dataSource={packagesList}\n        pagination={false}\n        bordered\n        rowKey={'name'}\n      />\n    </div>\n  );\n};\n\nexport default PackagesTable;\n","import React from 'react';\nimport { Space, Typography } from 'antd';\nimport PackageInput from '../../components/PackageInput';\nimport PackagesTable from '../../components/PackagesTable';\n\nconst { Title } = Typography;\n\nconst MainPage: React.FC = () => {\n  return (\n    <Space direction='vertical' size={20} style={{ width: '100%' }}>\n      <Title level={2}>Package Parser</Title>\n      <PackageInput />\n      <PackagesTable />\n    </Space>\n  );\n};\n\nexport default MainPage;\n","import MainPage from './MainPage';\n\nexport default MainPage;\n","import { configureStore } from '@reduxjs/toolkit';\nimport packageReducer from '../features/packages/packagesSlice';\n\nexport const store = configureStore({\n  reducer: {\n    packages: packageReducer,\n  },\n});\n","import React from 'react';\nimport MainPage from './containers/MainPage';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <MainPage />\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}