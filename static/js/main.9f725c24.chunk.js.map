{"version":3,"sources":["app/hooks.ts","features/packages/constants.ts","API.ts","features/packages/utils.ts","features/packages/packageSliceAsync.ts","components/PackageInput/constants.ts","components/PackageInput/PackageInput.tsx","components/PackageInput/index.ts","components/PackagesTable/utils.tsx","components/PackagesTable/index.ts","components/PackagesTable/PackagesTable.tsx","containers/MainPage/MainPage.tsx","containers/MainPage/index.ts","features/packages/packagesSlice.ts","app/store.ts","App.tsx","index.tsx"],"names":["useAppSelector","useSelector","ERROR_MESSAGES","httpRequest","Axios","create","baseURL","api","getPackage","name","a","get","params","q","data","getPackagesData","dependenciesList","promises","map","dep","API","Promise","all","then","res","item","idx","results","package","description","keywords","links","isArray","array","Array","Error","isEmpty","line","validatePackagesTerm","packagesTerm","json","JSON","parse","fetchPackages","createAsyncThunk","packagesNamesList","Object","keys","packageFormInputs","placeholder","packageFormSubmitButton","TextArea","Input","PackageInput","dispatch","useDispatch","loading","state","packages","Form","useForm","form","dependencies","layout","onFinish","e","Item","required","allowClear","autoSize","minRows","type","htmlType","columns","title","dataIndex","key","width","render","keyword","id","color","toUpperCase","target","rel","href","npm","PackagesTable","packagesList","className","dataSource","pagination","bordered","rowKey","Title","Typography","MainPage","direction","size","style","level","reducer","createSlice","initialState","reducers","updatePackage","action","payload","setLoading","extraReducers","builder","addCase","pending","fulfilled","rejected","Modal","error","message","store","configureStore","packageReducer","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f725c24.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './types';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","export const ERROR_MESSAGES = {\n  EMPTY_JSON: 'JSON is empty',\n  NOT_A_JSON: 'Not a JSON',\n};\n\nexport const EMPTY_JSON = '{}';\n","import Axios from 'axios';\nimport { IApi } from './types/APITypes';\n\nconst httpRequest = Axios.create({\n  baseURL: 'https://api.npms.io/v2/search',\n});\n\nconst api: IApi = {\n  getPackage: async (name) => {\n    const { data } = await httpRequest.get('', {\n      params: {\n        q: name,\n      },\n    });\n\n    return data;\n  },\n};\n\nexport default api;\n","import {\n  TGetEmptyPackage,\n  TGetPackagesData,\n  TIsArray,\n  TIsEmpty,\n  TValidatePackagesTerm,\n} from './packagesSliceTypes';\nimport { EMPTY_JSON, ERROR_MESSAGES } from './constants';\nimport API from '../../API';\n\nexport const getEmptyPackage: TGetEmptyPackage = (name) => {\n  return {\n    name,\n    description: '-',\n    keywords: [],\n    links: [],\n  };\n};\n\nexport const getPackagesData: TGetPackagesData = async (dependenciesList) => {\n  const promises = dependenciesList.map((dep) => API.getPackage(dep));\n\n  return await Promise.all(promises).then((res) =>\n    res.map(\n      (item, idx) =>\n        item.results[0]?.package || getEmptyPackage(dependenciesList[idx]),\n    ),\n  );\n};\n\nconst isArray: TIsArray = (array) => {\n  if (Array.isArray(array)) {\n    throw new Error();\n  }\n};\n\nconst isEmpty: TIsEmpty = (line) => {\n  if (!line || line === EMPTY_JSON) {\n    throw new Error(ERROR_MESSAGES.EMPTY_JSON);\n  }\n};\n\nexport const validatePackagesTerm: TValidatePackagesTerm = async (\n  packagesTerm,\n) => {\n  isEmpty(packagesTerm);\n  try {\n    const json = JSON.parse(packagesTerm);\n    isArray(json);\n  } catch {\n    throw new Error(ERROR_MESSAGES.NOT_A_JSON);\n  }\n};\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { getPackagesData, validatePackagesTerm } from './utils';\n\nexport const fetchPackages = createAsyncThunk(\n  'packages/fetchPackages',\n  async (packagesTerm: string) => {\n    await validatePackagesTerm(packagesTerm);\n    const packagesNamesList = Object.keys(JSON.parse(packagesTerm));\n    return await getPackagesData(packagesNamesList);\n  },\n);\n","import { IPackageFormInputs } from './PackageInputTypes';\n\nexport const packageFormInputs: IPackageFormInputs = {\n  dependencies: {\n    name: 'dependencies',\n    placeholder: 'Insert dependencies json. Example: { \"react\": \"^17.0.2\" }',\n  },\n};\n\nexport const packageFormSubmitButton = {\n  label: 'Find',\n};\n","import React from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { TOnFinish } from './PackageInputTypes';\nimport { RootState } from '../../app/types';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { fetchPackages } from '../../features/packages/packageSliceAsync';\nimport { packageFormInputs, packageFormSubmitButton } from './constants';\n\nconst { TextArea } = Input;\n\nconst PackageInput: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const loading = useAppSelector((state: RootState) => state.packages.loading);\n  const [form] = Form.useForm();\n\n  const { dependencies } = packageFormInputs;\n\n  const onFinish: TOnFinish = (e) => {\n    dispatch(fetchPackages(e[dependencies.name]));\n  };\n\n  return (\n    <Form form={form} layout='vertical' onFinish={onFinish}>\n      <Form.Item name={dependencies.name} required>\n        <TextArea\n          allowClear\n          autoSize={{ minRows: 2 }}\n          placeholder={dependencies.placeholder}\n        />\n      </Form.Item>\n      <Form.Item>\n        <Button loading={loading} type='primary' htmlType='submit'>\n          {packageFormSubmitButton.label}\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default PackageInput;\n","import PackageInput from './PackageInput';\n\nexport default PackageInput;\n","import React from 'react';\nimport { Tag } from 'antd';\n\nexport const columns = [\n  {\n    title: 'Title',\n    dataIndex: 'name',\n    key: 'name',\n    width: '15%',\n  },\n  {\n    title: 'Description',\n    dataIndex: 'description',\n    key: 'description',\n    width: '40%',\n  },\n  {\n    title: 'Tags',\n    dataIndex: 'keywords',\n    key: 'keywords',\n    render: (keywords: string[]) => (\n      <>\n        {keywords?.map((keyword, id) => (\n          <Tag color='blue' key={`${keyword}-${id}`}>\n            {keyword.toUpperCase()}\n          </Tag>\n        ))}\n      </>\n    ),\n  },\n  {\n    title: 'NPM link',\n    dataIndex: 'links',\n    key: 'links',\n    render: (links: { npm: string }) => (\n      <a target='_blank' rel='noreferrer' href={links.npm}>\n        {links.npm}\n      </a>\n    ),\n  },\n];\n","import PackagesTable from './PackagesTable';\n\nexport default PackagesTable;\n","import React from 'react';\nimport { Table } from 'antd';\nimport { columns } from './utils';\nimport { RootState } from '../../app/types';\nimport { useAppSelector } from '../../app/hooks';\n\nconst PackagesTable: React.FC = () => {\n  const { loading, packagesList } = useAppSelector(\n    (state: RootState) => state.packages,\n  );\n\n  return (\n    <div className='App'>\n      <Table\n        loading={loading}\n        columns={columns}\n        dataSource={packagesList}\n        pagination={false}\n        bordered\n        rowKey={'name'}\n      />\n    </div>\n  );\n};\n\nexport default PackagesTable;\n","import React from 'react';\nimport { Space, Typography } from 'antd';\nimport PackageInput from '../../components/PackageInput';\nimport PackagesTable from '../../components/PackagesTable';\n\nconst { Title } = Typography;\n\nconst MainPage: React.FC = () => {\n  return (\n    <Space direction='vertical' size={20} style={{ width: '100%' }}>\n      <Title level={2}>Package Parser</Title>\n      <PackageInput />\n      <PackagesTable />\n    </Space>\n  );\n};\n\nexport default MainPage;\n","import MainPage from './MainPage';\n\nexport default MainPage;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IPackage, IPackagesState } from './packagesSliceTypes';\nimport { fetchPackages } from './packageSliceAsync';\nimport { Modal } from 'antd';\n\nconst initialState: IPackagesState = {\n  packagesList: [],\n  loading: false,\n};\n\nexport const packagesSlice = createSlice({\n  name: 'packages',\n  initialState,\n  reducers: {\n    updatePackage: (state, action: PayloadAction<IPackage[]>) => {\n      state.packagesList = action.payload;\n    },\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchPackages.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(fetchPackages.fulfilled, (state, action) => {\n      state.packagesList = action.payload;\n      state.loading = false;\n    });\n    builder.addCase(fetchPackages.rejected, (state, action) => {\n      Modal.error({ title: action.error.message });\n      state.loading = false;\n    });\n  },\n});\n\nconst { reducer } = packagesSlice;\n\nexport default reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport packageReducer from '../features/packages/packagesSlice';\n\nexport const store = configureStore({\n  reducer: {\n    packages: packageReducer,\n  },\n});\n","import React from 'react';\nimport MainPage from './containers/MainPage';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <MainPage />\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}